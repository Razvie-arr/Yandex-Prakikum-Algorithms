package com.company.sprint3;

public class OldSolution {
    public static int brokenSearch(int[] arr, int k, int left, int right) {
        if (right >= left) {
            int mid = (left + right) / 2;
            if (arr[mid] == k) {
                return mid;
            }
            else if (arr.length == 1) {
                if (arr[0] == k) {
                    return mid;
                }
            }
            else if (arr.length == 2) {
                if (arr[0] == k) {
                    return 0;
                }
                else if (arr[1] == k) {
                    return 1;
                }
            }
            else if (arr[left] <= arr[mid]) {
                if (k <= arr[mid] && arr[left] < k) {
                    return binarySearch(arr, k, left, mid - 1);
                }
                else {
                    return brokenSearch(arr, k, mid, right);
                }
            }
            else {
                if (k <= arr[mid] && arr[left] < k)  {
                    return brokenSearch(arr, k, left, mid - 1);
                }
                int leftToMid = brokenSearch(arr, k, left, mid - 1);
                if (leftToMid != -1) {
                    return leftToMid;
                }
                return brokenSearch(arr, k, mid + 1, right);
            }
        }
        return -1;
    }
    public static int binarySearch(int[] sortedArray, int key, int low, int high) {
        int index = -1;

        while (low <= high) {
            int mid = (low + high) / 2;
            if (sortedArray[mid] < key) {
                low = mid + 1;
            } else if (sortedArray[mid] > key) {
                high = mid - 1;
            } else if (sortedArray[mid] == key) {
                index = mid;
                break;
            }
        }
        return index;
    }
    public static int brokenSearch(int[] arr, int k) {
        int left = 0;
        int right = arr.length - 1;
        if (right >= left) {

            int mid = (left + right) / 2;
            if (arr[mid] == k) {
                return mid;
            }
            else if (arr.length == 2) {
                if (arr[0] == k) {
                    return 0;
                }
                else if (arr[1] == k) {
                    return 1;
                }
            }
            else if (arr[left] <= arr[mid]) {
                if (k <= arr[mid] && arr[left] < k) {
                    return binarySearch(arr, k, left, mid - 1);
                }
                else {
                    return brokenSearch(arr, k, mid + 1, right);
                }
            }
            else {
                if (k <= arr[mid] && arr[left] < k) {
                    return brokenSearch(arr, k, left, mid - 1);
                }
                int leftToMid = brokenSearch(arr, k, left, mid - 1);
                if (leftToMid != -1) {
                    return leftToMid;
                }
                return brokenSearch(arr, k, mid + 1, right);
            }
        }
        return -1;
    }
    public static void main(String[] args) {
        int[] arr = {800, 850, 900, 950, 1000, 1200, 1300, 1500, 1700, 0, 10, 15, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150};
        System.out.println(brokenSearch(arr, 150));
//        int[] arr = {851, 852, 854, 855, 856, 860, 861, 862, 864, 865, 867, 868, 871, 872, 873, 874, 877, 878, 879, 882, 884, 885, 886, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 907, 908, 909, 910, 911, 912, 913, 914, 917, 918, 920, 921, 922, 923, 925, 926, 927, 928, 930, 931, 933, 934, 935, 937, 938, 939, 940, 941, 943, 944, 945, 946, 949, 951, 957, 959, 961, 963, 965, 966, 969, 970, 971, 972, 974, 975, 976, 978, 980, 981, 982, 983, 987, 988, 989, 991, 992, 993, 994, 995, 996, 998, 999, 1000, 0, 1, 2, 7, 8, 9, 11, 13, 16, 18, 20, 22, 23, 25, 26, 28, 30, 31, 34, 39, 40, 41, 43, 45, 46, 47, 50, 51, 53, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 74, 77, 78, 79, 80, 82, 83, 85, 86, 87, 88, 90, 92, 94, 96, 97, 99, 101, 102, 104, 105, 106, 107, 108, 109, 111, 113, 114, 115, 117, 120, 124, 125, 127, 129, 132, 134, 135, 138, 140, 141, 144, 146, 147, 148, 150, 151, 153, 155, 156, 157, 158, 159, 160, 162, 165, 167, 169, 171, 172, 173, 174, 175, 179, 183, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 245, 246, 247, 248, 250, 252, 254, 255, 256, 257, 258, 265, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 291, 293, 294, 295, 296, 297, 301, 303, 306, 308, 309, 310, 311, 315, 316, 317, 319, 320, 321, 322, 324, 327, 328, 329, 330, 331, 333, 334, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 353, 354, 355, 356, 357, 358, 360, 363, 367, 370, 372, 373, 374, 377, 378, 379, 380, 382, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 401, 402, 403, 404, 406, 407, 408, 410, 412, 413, 416, 417, 418, 420, 422, 423, 424, 426, 428, 430, 431, 434, 436, 438, 439, 440, 441, 442, 443, 444, 446, 448, 450, 451, 453, 457, 459, 460, 461, 462, 463, 468, 470, 471, 473, 474, 476, 477, 478, 480, 482, 483, 485, 486, 487, 490, 491, 493, 494, 495, 497, 498, 499, 502, 503, 505, 506, 509, 510, 512, 513, 515, 516, 518, 519, 521, 526, 527, 528, 529, 530, 532, 538, 539, 542, 543, 544, 549, 552, 553, 555, 556, 558, 559, 560, 563, 565, 566, 569, 570, 571, 572, 573, 576, 577, 578, 580, 583, 584, 587, 589, 591, 594, 595, 596, 600, 601, 602, 603, 606, 608, 609, 611, 612, 613, 614, 615, 618, 619, 620, 623, 624, 626, 627, 630, 631, 634, 638, 639, 640, 641, 642, 643, 645, 646, 647, 649, 652, 653, 655, 656, 657, 659, 663, 665, 666, 669, 673, 674, 675, 676, 678, 681, 682, 686, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 706, 707, 709, 710, 711, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 730, 731, 732, 733, 735, 736, 737, 739, 741, 743, 746, 747, 749, 751, 752, 756, 757, 758, 759, 762, 765, 767, 769, 771, 772, 773, 774, 775, 777, 779, 780, 783, 784, 785, 786, 787, 790, 798, 799, 800, 802, 805, 806, 809, 810, 811, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 829, 830, 831, 832, 834, 835, 836, 837, 838, 840, 842, 843, 844, 845, 846, 847};
//        System.out.println(brokenSearch(arr, 295));
    }
}
